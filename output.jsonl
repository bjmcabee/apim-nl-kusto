{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "What is the current Tenant Release Status?"}, {"role": "assistant", "content": "\n```kql\nGetTenantVersions\n| extend Region = tolower(replace_string(regions, \" \", \"\"))\n| join kind = inner (GetRegionalAppsVersion | where component == \"RegionalResourceProvider\" | distinct Region, ClusterName, sdpStage | where ClusterName !contains \"prv-01\") on Region\n| where sku !contains \"V2\"\n| summarize count() by sdpStage1, version, releaseChannel\n| order by sdpStage1 asc\n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "What is the current SKU distribution in West Europe?"}, {"role": "assistant", "content": "\n```kql\nGetTenantVersions\n| where regions contains \"west europe\"\n| summarize count() by sku\n| order by count_ desc\n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "How many services are quarantined in each stage?"}, {"role": "assistant", "content": "\n```kql\nGetQuarantinedServicesList\n| extend jsonObject = parse_json(datetimeRanges)\n| mv-expand jsonObject\n| extend endDate = todatetime(jsonObject.endDateTime)\n| where endDate > now() \n| distinct serviceName, sdpStage, quarantineType = \"DateRange\"\n| union (GetQuarantinedServicesList\n| where minorVersionNumbers != \"[]\"\n| distinct serviceName, sdpStage,quarantineType = \"MinorVersion\")\n| summarize quarantineType = min(quarantineType)  by serviceName, sdpStage\n| summarize count() by sdpStage, quarantineType\n| order by sdpStage asc\n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "How many services are quarantined?"}, {"role": "assistant", "content": "\n```kql\nGetQuarantinedServicesList\n| extend jsonObject = parse_json(datetimeRanges)\n| mv-expand jsonObject\n| extend endDate = todatetime(jsonObject.endDateTime)\n| where endDate > now() \n| distinct serviceName, sdpStage, quarantineType = \"DateRange\"\n| union (GetQuarantinedServicesList\n| where minorVersionNumbers != \"[]\"\n| distinct serviceName, sdpStage,quarantineType = \"MinorVersion\")\n| summarize quarantineType = min(quarantineType) by serviceName\n| summarize count() by quarantineType\n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "What is the Current Windows Version By Stage?"}, {"role": "assistant", "content": "```kql\nGetTenantVersions\n| extend windowsVer = extract(@\"(?i)(2019|2022)-Datacenter(?:-azure-edition)?\", 0, windowsVersion)\n| where sku !contains \"v2\"\n| summarize count() by sdpStage, windowsVer\n| where windowsVer != \"\"\n| sort by sdpStage asc\n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "Get the VersionMappings"}, {"role": "assistant", "content": "\n```kql\nAll('Orchestration')\n| where PreciseTimeStamp > ago(6h)\n| where eventType == \"GotSortedVersionMappings\"\n| extend msg = parse_json(message)\n| mv-expand msg\n| extend \n    channel = tostring(msg[\"ReleaseChannel\"]),\n    targetVersion = tostring(msg[\"TargetVersion\"])\n| summarize arg_max(PreciseTimeStamp, targetVersion) by Region, channel\n| evaluate pivot(channel, any(targetVersion))\n| join kind=leftouter GetSDPRegions on Region\n| extend SdpStage = coalesce(SdpStage, 6)\n| project Region, SdpStage, GenAI, Preview, Default, Stable, Stable2, Stable3\n| order by SdpStage asc, Region asc \n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "Get the VersionMappings in EastUS"}, {"role": "assistant", "content": "\n```kql\nAll('Orchestration')\n| where PreciseTimeStamp > ago(6h)\n| where eventType == \"GotSortedVersionMappings\"\n| extend msg = parse_json(message)\n| mv-expand msg\n| extend \n    channel = tostring(msg[\"ReleaseChannel\"]),\n    targetVersion = tostring(msg[\"TargetVersion\"])\n| summarize arg_max(PreciseTimeStamp, targetVersion) by Region, channel\n| evaluate pivot(channel, any(targetVersion))\n| join kind=leftouter GetSDPRegions on Region\n| extend SdpStage = coalesce(SdpStage, 6)\n| project Region, SdpStage, GenAI, Preview, Default, Stable, Stable2, Stable3\n| order by SdpStage asc, Region asc \n| where Region == \"East US\"\n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "Get the ResourceProvider Versions"}, {"role": "assistant", "content": "\n```kql\nAll('Orchestration')\n| where TIMESTAMP >= datetime(2025-07-23T16:52:30Z) and TIMESTAMP <= datetime(2025-07-23T22:53:00Z)\n| where eventType in (\"HealthMonitorRegionalResourceProviderReachable\")\n| where eventType !contains \"Healthy\"\n| extend msg=replace(\"\\\"{\", \"{\", replace(\"}\\\"\", \"}\", replace(@\"\\\\\", \"\", message)))\n| extend msg=parse_json(msg), eventType = replace(\"HealthMonitorRegional\", \"\", eventType)\n| project PreciseTimeStamp, ClusterName=tostring(msg.ClusterName), Region=msg.Region, RuntimeVersion= iff(eventType contains \"Smapi\", msg.ResponseBody.version, replace(\"'\", \"\", tostring(msg.ResponseBody.RuntimeVersion))), eventType, Endpoint=tostring(msg.Endpoint) // , msg.StatusCode\n| extend t=PreciseTimeStamp\n| where ClusterName !endswith \"-prv-01\"\n| summarize argmax(t, ClusterName, tostring(RuntimeVersion), tostring(Endpoint)) by eventType, tostring(Region)\n| join kind=inner (GetRegionalAppsVersion()\n| where component == \"RegionalResourceProvider\"\n| summarize by sdpStage, Region\n| extend Region = replace(\" \", \"\", tolower(Region))\n| order by sdpStage asc)\non Region\n| project sdpStage, Region, ClusterName= max_t_ClusterName, RuntimeVersion= max_t_RuntimeVersion, eventType, Time=max_t, Endpoint= max_t_Endpoint\n| summarize dcount(Region) by RuntimeVersion, sdpStage\n| order by sdpStage asc\n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "Get the ResourceProvider Versions in Stage 1"}, {"role": "assistant", "content": "\n```kql\nAll('Orchestration')\n| where TIMESTAMP >= datetime(2025-07-23T16:52:30Z) and TIMESTAMP <= datetime(2025-07-23T22:53:00Z)\n| where eventType in (\"HealthMonitorRegionalResourceProviderReachable\")\n| where eventType !contains \"Healthy\"\n| extend msg=replace(\"\\\"{\", \"{\", replace(\"}\\\"\", \"}\", replace(@\"\\\\\", \"\", message)))\n| extend msg=parse_json(msg), eventType = replace(\"HealthMonitorRegional\", \"\", eventType)\n| project PreciseTimeStamp, ClusterName=tostring(msg.ClusterName), Region=msg.Region, RuntimeVersion= iff(eventType contains \"Smapi\", msg.ResponseBody.version, replace(\"'\", \"\", tostring(msg.ResponseBody.RuntimeVersion))), eventType, Endpoint=tostring(msg.Endpoint) // , msg.StatusCode\n| extend t=PreciseTimeStamp\n| where ClusterName !endswith \"-prv-01\"\n| summarize argmax(t, ClusterName, tostring(RuntimeVersion), tostring(Endpoint)) by eventType, tostring(Region)\n| join kind=inner (GetRegionalAppsVersion()\n| where component == \"RegionalResourceProvider\"\n| summarize by sdpStage, Region\n| extend Region = replace(\" \", \"\", tolower(Region))\n| order by sdpStage asc)\non Region\n| project sdpStage, Region, ClusterName= max_t_ClusterName, RuntimeVersion= max_t_RuntimeVersion, eventType, Time=max_t, Endpoint= max_t_Endpoint\n| summarize dcount(Region) by RuntimeVersion, sdpStage\n| order by sdpStage asc\n| where sdpStage == \"1\"\n```\n"}]}
{"messages": [{"role": "system", "content": "You are a Kusto (KQL) expert. Given a natural language question, generate a valid KQL query.\n\nSome Key concepts to keep in mind:\n- Kusto Query Language (KQL) is used to query large datasets in Azure Data Explorer.\n- ReleaseChannel is a field that indicates the release channel of a tenant, such as 'Preview', 'Default', 'or 'Stable'. These are how versioning is controlled and must go through all sdp stages to proceed to next one.\n- SdpStage is a field that indicates the stage of the Software Development Process (SDP) for a tenant, such as '1', '2', '3', etc. It is used to track the progress of a tenant version through the SDP\n- Tenant Version is a field that indicates the version of a service looks like 0.xx.xxxx.0 usually with the first two digits indicating the minor version and the last four digits indicating the specific version. so version 0.48 would refer to all versions with 0.48.xxxx.0\n- Regions is a field that indicates the region of a tenant, such as 'West Europe', 'East US', etc. It is used to track the geographical distribution of tenants.\n\nYou should used All(\"table_name\") to refer to the table names in the Kusto database.\nYou should use the following table names:\nOrchestration: has columns like 'PreciseTimeStamp', 'instanceId', 'serviceName', 'message', 'eventType'\n\nYou are working in with the following shared queries:\nGetTenantVersions: this query returns the tenant versions with their details. Tenant Versions will simply be called version column in this query, Skus will be in the sku column, and releaseChannel column will hold any (release) channel references that are made\nGetQuarantinedServicesList: this query returns the list of quarantined services.\n\nHere are some examples of natural language questions and their corresponding KQL queries:\n\nExample 1:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 1\"\nKQL Query:\n```kql\nlet sdp_stage = '1';\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| summarize count() by version\n| order by version desc\n```\n\nExample 2:\nQuestion: \"Show me the sku v1 version distribution in sdp stage 2 preview release channel\"\nKQL Query:\n```kql\nlet sdp_stage = '2';\nlet rc = \"Preview\";\nGetTenantVersions\n| where sku !contains \"v2\"\n| where sdpStage == sdp_stage\n| where releaseChannel == rc\n| extend release_channel = parse_json(message)['ReleaseChannel']\n| summarize count() by version\n| order by version desc\n```\n\nNotice in the example above, version, skuV1 meaning not v2, and sdpStage name\n\nExample 3:\nQuestion: \"What is the current sku distribution in west europe?\"\nKQL Query:\n```kql\nlet region = \"West Europe\";\nGetTenantVersions\n| where regions contains region\n| summarize count() by sku\n```\n\nNotice in the example above, region is used to filter the results by the region.\n\nInstructions:\n- Generate only valid KQL queries\n- Use appropriate table names and column names\n- Include proper time filters when relevant\n- Use summarize, project, where, and order operators appropriately\n- Wrap your KQL query in ```kql code blocks\n- Be concise and efficient in your queries"}, {"role": "user", "content": "Get the ResourceProvider Versions in East US"}, {"role": "assistant", "content": "\n```kql\nAll('Orchestration')\n| where TIMESTAMP >= datetime(2025-07-23T16:52:30Z) and TIMESTAMP <= datetime(2025-07-23T22:53:00Z)\n| where eventType in (\"HealthMonitorRegionalResourceProviderReachable\")\n| where eventType !contains \"Healthy\"\n| extend msg=replace(\"\\\"{\", \"{\", replace(\"}\\\"\", \"}\", replace(@\"\\\\\", \"\", message)))\n| extend msg=parse_json(msg), eventType = replace(\"HealthMonitorRegional\", \"\", eventType)\n| project PreciseTimeStamp, ClusterName=tostring(msg.ClusterName), Region=msg.Region, RuntimeVersion= iff(eventType contains \"Smapi\", msg.ResponseBody.version, replace(\"'\", \"\", tostring(msg.ResponseBody.RuntimeVersion))), eventType, Endpoint=tostring(msg.Endpoint) // , msg.StatusCode\n| extend t=PreciseTimeStamp\n| where ClusterName !endswith \"-prv-01\"\n| summarize argmax(t, ClusterName, tostring(RuntimeVersion), tostring(Endpoint)) by eventType, tostring(Region)\n| join kind=inner (GetRegionalAppsVersion()\n| where component == \"RegionalResourceProvider\"\n| summarize by sdpStage, Region\n| extend Region = replace(\" \", \"\", tolower(Region))\n| order by sdpStage asc)\non Region\n| project sdpStage, Region, ClusterName= max_t_ClusterName, RuntimeVersion= max_t_RuntimeVersion, eventType, Time=max_t, Endpoint= max_t_Endpoint\n| summarize dcount(Region) by RuntimeVersion, Region\n| where Region == \"East US\"\n```\n"}]}
